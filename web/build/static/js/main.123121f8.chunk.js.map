{"version":3,"sources":["App.jsx","reportWebVitals.js","index.js"],"names":["baseUrl","window","location","hostname","split","App","formik","useFormik","initialValues","name","email","address","onSubmit","values","console","log","axios","post","then","res","data","setToggleGetUser","toggleGetUser","useState","users","setUsers","useEffect","get","handleSubmit","Stack","spacing","TextField","fullWidth","color","id","label","variant","value","onChange","handleChange","error","touched","website","Boolean","errors","helperText","type","password","Button","map","eachUser","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uNAQMA,EAAqD,cAA3CC,OAAOC,SAASC,SAASC,MAAM,KAAK,GADxC,wBACmE,GAkHhEC,MA/Gf,WAEE,IAAMC,EAASC,YAAU,CACvBC,cAAe,CACbC,KAAM,GACNC,MAAO,GACPC,QAAS,IAEXC,SAGF,SAA0BC,GACxBC,QAAQC,IAAI,WAAYF,GACxBG,IAAMC,KAAN,UAAcjB,EAAd,mBAAwC,CACtCS,KAAMI,EAAOJ,KACbC,MAAOG,EAAOH,MACdC,QAASE,EAAOF,UAEfO,MAAK,SAAAC,GACJL,QAAQC,IAAII,EAAIC,MAChBC,GAAkBC,SApBX,EAwBaC,mBAAS,IAxBtB,mBAwBNC,EAxBM,KAwBCC,EAxBD,OAyB6BF,oBAAS,GAzBtC,mBAyBND,EAzBM,KAyBSD,EAzBT,KAyCb,OAdAK,qBAAU,WAQR,OANAV,IAAMW,IAAN,UAAa3B,EAAb,oBACGkB,MAAK,SAAAC,GACJL,QAAQC,IAAII,EAAIC,MAChBK,EAASN,EAAIC,SAGV,WACLN,QAAQC,IAAI,cAEb,CAACO,IAIF,gCAGE,sBAAMV,SAAUN,EAAOsB,aAAvB,SACE,eAACC,EAAA,EAAD,CAAOC,QAAS,EAAhB,UACE,cAACC,EAAA,EAAD,CACEC,WAAS,EACTC,MAAM,UACNC,GAAG,iBACHC,MAAM,OACNC,QAAQ,WAER3B,KAAK,OACL4B,MAAO/B,EAAOO,OAAOJ,KACrB6B,SAAUhC,EAAOiC,aAEjBC,MAAOlC,EAAOmC,QAAQC,SAAWC,QAAQrC,EAAOsC,OAAOF,SACvDG,WAAYvC,EAAOmC,QAAQC,SAAWpC,EAAOsC,OAAOF,UAGtD,cAACX,EAAA,EAAD,CACEC,WAAS,EACTC,MAAM,UACNC,GAAG,iBACHC,MAAM,QACNC,QAAQ,WAER3B,KAAK,QACL4B,MAAO/B,EAAOO,OAAOH,MACrB4B,SAAUhC,EAAOiC,aAEjBC,MAAOlC,EAAOmC,QAAQ/B,OAASiC,QAAQrC,EAAOsC,OAAOlC,OACrDmC,WAAYvC,EAAOmC,QAAQ/B,OAASJ,EAAOsC,OAAOlC,QAGpD,cAACqB,EAAA,EAAD,CACEC,WAAS,EACTC,MAAM,UACNC,GAAG,eACHC,MAAM,UACNC,QAAQ,WACRU,KAAK,UAELrC,KAAK,UACL4B,MAAO/B,EAAOO,OAAOF,QACrB2B,SAAUhC,EAAOiC,aAEjBC,MAAOlC,EAAOmC,QAAQM,UAAYJ,QAAQrC,EAAOsC,OAAOG,UACxDF,WAAYvC,EAAOmC,QAAQM,UAAYzC,EAAOsC,OAAOG,WAGvD,cAACC,EAAA,EAAD,CAAQhB,WAAS,EAACI,QAAQ,YAAYH,MAAM,UAAUa,KAAK,SAA3D,sBAMHtB,EAAMyB,KAAI,SAAAC,GACT,OAAO,qCACL,6BAAKA,EAASzC,OACd,6BAAKyC,EAASxC,QACd,6BAAKwC,EAASvC,oBCtGTwC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBnC,MAAK,YAAkD,IAA/CoC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.123121f8.chunk.js","sourcesContent":["import axios from 'axios';\nimport { useState, useEffect } from \"react\"\nimport { useFormik } from \"formik\";\nimport Stack from '@mui/material/Stack';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\n\nconst dev = \"http://localhost:5000\"\nconst baseUrl = window.location.hostname.split(\":\")[0] === \"localhost\" ? dev : \"\";\n\n\nfunction App() {\n\n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      email: '',\n      address: '',\n    },\n    onSubmit: onSubmitFunction\n  });\n\n  function onSubmitFunction(values) {\n    console.log(\"values: \", values)\n    axios.post(`${baseUrl}/api/v1/profile`, {\n      name: values.name,\n      email: values.email,\n      address: values.address\n    })\n      .then(res => {\n        console.log(res.data);\n        setToggleGetUser(!toggleGetUser)\n      });\n  }\n\n  const [users, setUsers] = useState([]);\n  const [toggleGetUser, setToggleGetUser] = useState(false);\n\n  useEffect(() => {\n\n    axios.get(`${baseUrl}/api/v1/profile`)\n      .then(res => {\n        console.log(res.data);\n        setUsers(res.data)\n      });\n\n    return () => {\n      console.log(\"cleanup\");\n    };\n  }, [toggleGetUser]);\n\n\n  return (\n    <div>\n\n\n      <form onSubmit={formik.handleSubmit}>\n        <Stack spacing={2}>\n          <TextField\n            fullWidth\n            color=\"primary\"\n            id=\"outlined-basic\"\n            label=\"name\"\n            variant=\"outlined\"\n\n            name=\"name\"\n            value={formik.values.name}\n            onChange={formik.handleChange}\n\n            error={formik.touched.website && Boolean(formik.errors.website)}\n            helperText={formik.touched.website && formik.errors.website}\n          />\n\n          <TextField\n            fullWidth\n            color=\"primary\"\n            id=\"outlined-basic\"\n            label=\"email\"\n            variant=\"outlined\"\n\n            name=\"email\"\n            value={formik.values.email}\n            onChange={formik.handleChange}\n\n            error={formik.touched.email && Boolean(formik.errors.email)}\n            helperText={formik.touched.email && formik.errors.email}\n          />\n\n          <TextField\n            fullWidth\n            color=\"primary\"\n            id=\"filled-basic\"\n            label=\"Address\"\n            variant=\"outlined\"\n            type=\"address\"\n\n            name=\"address\"\n            value={formik.values.address}\n            onChange={formik.handleChange}\n\n            error={formik.touched.password && Boolean(formik.errors.password)}\n            helperText={formik.touched.password && formik.errors.password}\n          />\n\n          <Button fullWidth variant=\"contained\" color=\"primary\" type=\"submit\">Add</Button>\n        </Stack>\n      </form>\n\n\n\n      {users.map(eachUser => {\n        return <>\n          <h1>{eachUser.name}</h1>\n          <h3>{eachUser.email}</h3>\n          <h3>{eachUser.address}</h3>\n        </>\n      })}\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}